/**
 * MAD - OpenAPI 3.0
 * MAD(Mensch ärger dich nicht! aber in cool!) is a funny family game for one to four people.  Some useful links:  - [Spielregeln PDF](https://www.schmidtspiele.de/files/Produkte/4/49085%20-%20Mensch%20ärgere%20Dich%20nicht®/Mensch_aergere_dich_nicht49085D.pdf)
 *
 * The version of the OpenAPI document: 0.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MoveFigure from '../model/MoveFigure';
import RollResponse from '../model/RollResponse';
import UpdateResponse from '../model/UpdateResponse';

/**
* RunningGame service.
* @module api/RunningGameApi
* @version 0.0.4
*/
export default class RunningGameApi {

    /**
    * Constructs a new RunningGameApi. 
    * @alias module:api/RunningGameApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getCurrentGameStatus operation.
     * @callback module:api/RunningGameApi~getCurrentGameStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * request the current status of the game
     * 
     * @param {Number} gameId which game you are playing
     * @param {module:api/RunningGameApi~getCurrentGameStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateResponse}
     */
    getCurrentGameStatus(gameId, callback) {
      let postBody = null;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling getCurrentGameStatus");
      }

      let pathParams = {
        'gameId': gameId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UpdateResponse;
      return this.apiClient.callApi(
        '/update/{gameId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveFigure operation.
     * @callback module:api/RunningGameApi~moveFigureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MoveFigure} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * moves a figure
     * move figure x on field fieldId
     * @param {Number} gameId which game you are playing
     * @param {Number} fieldId ID of the field where the figure to be moved stands
     * @param {module:api/RunningGameApi~moveFigureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MoveFigure}
     */
    moveFigure(gameId, fieldId, callback) {
      let postBody = null;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling moveFigure");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling moveFigure");
      }

      let pathParams = {
      };
      let queryParams = {
        'gameId': gameId,
        'fieldId': fieldId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MoveFigure;
      return this.apiClient.callApi(
        '/moveFigure', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rollDice operation.
     * @callback module:api/RunningGameApi~rollDiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RollResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * rolls a dice
     * rolls a d6
     * @param {Number} gameId which game you are playing
     * @param {module:api/RunningGameApi~rollDiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RollResponse}
     */
    rollDice(gameId, callback) {
      let postBody = null;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling rollDice");
      }

      let pathParams = {
        'gameId': gameId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RollResponse;
      return this.apiClient.callApi(
        '/rollDice/{gameId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
